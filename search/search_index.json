{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Index Page","text":"<p>This site contains the project documentation for the <code>Which Plates</code> module</p>"},{"location":"index.html#table-of-contents","title":"Table of Contents","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"reference.html","title":"Reference","text":""},{"location":"reference.html#which_plates.functions","title":"<code>which_plates.functions</code>","text":"<p>Supporting functionss</p>"},{"location":"reference.html#which_plates.functions.calc_plates","title":"<code>calc_plates(weight, available_plates)</code>","text":"<p>computes the required weight plates to reach supplied weight</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>int</code> <p>desired weight</p> required <code>available_plates</code> <code>list</code> <p>available plates</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>number of plates per weight to reach supplied weight</p> Source code in <code>src/which_plates/functions.py</code> <pre><code>def calc_plates(weight: int, available_plates: list[float]) -&gt; dict:\n\"\"\"computes the required weight plates to reach supplied weight\n    Args:\n        weight (int): desired weight\n        available_plates (list): available plates\n    Returns:\n        dict: number of plates per weight to reach supplied weight\n    \"\"\"\n    plates = {}\n    remaining_weight = Decimal(round_num(weight))\n    available_plates.sort(reverse=True)\n\n    for plate in available_plates:\n        # at least two plates left in remaining weight\n        if remaining_weight / Decimal(plate) &gt;= Decimal(2):\n            # can only use even number of plates\n            if (int(remaining_weight / Decimal(plate)) % 2) == 0:\n                plate_count = int(Decimal(remaining_weight) // Decimal(plate))\n            else:\n                plate_count = int(Decimal(remaining_weight) // Decimal(plate)) - 1\n            plates[plate] = plate_count\n\n            remaining_weight -= Decimal(plate) * Decimal(plates[plate])\n\n    return plates\n</code></pre>"},{"location":"reference.html#which_plates.functions.round_num","title":"<code>round_num(number)</code>","text":"<p>rounds to nearest multiple of 5, assuming smallest plate is 2.5 pounds</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>float</code> <p>number to be rounded</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>rounded number</p> Source code in <code>src/which_plates/functions.py</code> <pre><code>def round_num(number: float) -&gt; int:\n\"\"\"rounds to nearest multiple of 5, assuming smallest plate is 2.5 pounds\n    Args:\n        number (float): number to be rounded\n    Returns:\n        int: rounded number\n    \"\"\"\n\n    try:\n        number = float(number)\n    except ValueError as value_error:\n        raise SystemExit(1) from value_error\n\n    if number % 10 &lt; 5:\n        rounded_number = number - (number % 10)\n    elif number % 10 &gt; 5:\n        rounded_number = number + (10 - (number % 10))\n    else:\n        rounded_number = number\n    return int(rounded_number)\n</code></pre>"},{"location":"reference.html#which_plates.main","title":"<code>which_plates.main</code>","text":"<p>main function for which_plates</p>"},{"location":"reference.html#which_plates.main.main","title":"<code>main()</code>","text":"<p>function with no inputs to allow use as a console script</p> Source code in <code>src/which_plates/main.py</code> <pre><code>def main() -&gt; int:\n\"\"\"function with no inputs to allow use as a console script\"\"\"\n\n    available_plates = [45, 35, 25, 15, 10, 5, 2.5]\n    bar_weight = int(input(\"Bar Weight:\"))\n    rep_max = int(input(\"One rep max:\"))\n    raw_list = input(\"Percentages for each set, space separated: \").split()\n    percentages = [float(n) / 100 for n in raw_list if n.isdigit()]\n\n    sys.exit(main_function(bar_weight, rep_max, available_plates, percentages))\n</code></pre>"},{"location":"reference.html#which_plates.main.main_function","title":"<code>main_function(bar_weight, rep_max, available_plates, percentages)</code>","text":"<p>main function</p> Source code in <code>src/which_plates/main.py</code> <pre><code>def main_function(\n    bar_weight: int, rep_max: int, available_plates: list, percentages: list\n) -&gt; int:\n\"\"\"main function\"\"\"\n\n    set_count = 1\n    used_plates = {}\n\n    for plates in available_plates:\n        used_plates[plates] = 0\n\n    for percent in percentages:\n        # calculate plate weight needed for current percentage\n        plate_weight = functions.round_num((rep_max * percent) - bar_weight)\n\n        if plate_weight &lt;= 0:\n            print(\"    Computed weight less than bar weight, try again\")\n        else:\n            total_weight = round(plate_weight + bar_weight)\n            weight = round(plate_weight)\n            perc = percent * 100\n            print(\n                f\"Set {set_count} @ {perc}%: {total_weight}lbs, {weight}lbs in plates\"\n            )  # noqa: E501\n\n        plates = functions.calc_plates(plate_weight, available_plates)\n        for p_weight, p_count in plates.items():\n            if used_plates[p_weight] &lt; p_count:\n                used_plates[p_weight] = p_count\n        set_count += 1\n\n    # Print summary\n    for p_weight, p_count in used_plates.items():\n        if p_count:\n            print(f\"     {p_weight}: {p_count}\")\n\n    return 0\n</code></pre>"}]}